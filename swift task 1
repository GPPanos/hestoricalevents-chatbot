import UIKit
import MapKit

class RideOrderViewController: UIViewController {

    @IBOutlet private weak var mapView: MKMapView!

    override func viewDidLoad() {
        super.viewDidLoad()
        setupMapView()
    }

    private func setupMapView() {
        mapView.delegate = self
        checkLocationAuthorization()
    }

    private func checkLocationAuthorization() {
        let locationManager = CLLocationManager()
        locationManager.delegate = self

        if CLLocationManager.locationServicesEnabled() {
            locationManager.requestWhenInUseAuthorization()
        } else {
            // Handle the case when location services are disabled
        }
    }
}

extension RideOrderViewController: CLLocationManagerDelegate {
    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {
        switch status {
        case .authorizedWhenInUse:
            mapView.showsUserLocation = true
            if let userLocation = manager.location?.coordinate {
                centerMapOnLocation(location: userLocation)
            }
        case .denied:
            showLocationDeniedAlert()
        default:
            break
        }
    }

    private func centerMapOnLocation(location: CLLocationCoordinate2D) {
        let region = MKCoordinateRegion(center: location, latitudinalMeters: 1000, longitudinalMeters: 1000)
        mapView.setRegion(region, animated: true)
    }

    private func showLocationDeniedAlert() {
        let alert = UIAlertController(title: "Location Access Denied", message: "Please enable location access in Settings to use this feature.", preferredStyle: .alert)
        let okAction = UIAlertAction(title: "OK", style: .default, handler: nil)
        alert.addAction(okAction)
        present(alert, animated: true, completion: nil)
    }
}

extension RideOrderViewController: MKMapViewDelegate {
    // Add any map delegate methods if needed
}
